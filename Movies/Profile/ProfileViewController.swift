//
//  ProfileViewController.swift
//  PeliculasNewTiss
//
//  Created Administrator on 23/05/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import CoreData

class ProfileViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {


    //MARK: - Protocol Properties
	var presenter: ProfilePresenterProtocol?

    //MARK: - Properties
    var listaFavorite = [MoviesFavorite]()
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    private var data : MoviesFavorite?
    
    lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView()
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    private lazy var dismissButton: UIButton = {
        let button = UIButton()
        button.setTitle("X", for: .normal)
        button.backgroundColor = UIColor(named: "FontGreen")
        button.layer.cornerRadius = 10
        button.addTarget(self, action: #selector(dismissProfile), for: .touchUpInside)
        return button
    }()
    
    let profileImage: UIImageView = {
        let image = UIImageView()
        image.image = UIImage(named: "profile")
        image.layer.cornerRadius = 50
        return image
    }()

    let profileLabel: UILabel = {
        let label = UILabel()
        label.text = "Profile"
        label.numberOfLines = 3
        label.textColor = UIColor(named: "FontGreen")
        if #available(iOS 16.0, *) {
            label.font = .systemFont(ofSize: 15, weight: .bold, width: .condensed)
        } else {
            // Fallback on earlier versions
        }
        
        return label
    }()
    
    let userLabel: UILabel = {
        let label = UILabel()
        label.text = "@angell_fr"
        label.numberOfLines = 3
        label.textColor = UIColor(named: "FontGreen")
        if #available(iOS 16.0, *) {
            label.font = .systemFont(ofSize: 15, weight: .bold, width: .condensed)
        } else {
            // Fallback on earlier versions
        }
        
        return label
    }()
    
    let favoriteShows: UILabel = {
        let label = UILabel()
        label.text = "Favorite Shows"
        label.numberOfLines = 3
        label.textColor = UIColor(named: "FontGreen")
        if #available(iOS 16.0, *) {
            label.font = .systemFont(ofSize: 15, weight: .bold, width: .condensed)
        } else {
            // Fallback on earlier versions
        }
        
        
        return label
    }()
    
    //MARK: - Life Cycle
	override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor(named: "background")
        recuperarDatos()
        configureUi()
        collectionView.reloadData()
    }
    
    //MARK: - Methods
    
    func configureUi(){
        view.addSubview(dismissButton)
        dismissButton.addAnchorsAndSize(width: nil, height: 20, left: nil, top: 2, right: 2, bottom: nil)
        
        view.addSubview(profileLabel)
        profileLabel.addAnchorsAndSize(width: nil, height: 30, left: 10, top: 50, right: nil, bottom: nil)
        
        view.addSubview(profileImage)
        profileImage.addAnchorsAndSize(width: 150, height: 150, left: 20, top: 20, right: nil, bottom: nil,withAnchor: .top,relativeToView: profileLabel)
        
        view.addSubview(userLabel)
        userLabel.addAnchorsAndSize(width: nil, height: 30, left: 30, top: 150, right: nil, bottom: nil, withAnchor: .left,relativeToView: profileImage)
        
        view.addSubview(favoriteShows)
        favoriteShows.addAnchorsAndSize(width: nil, height: 30, left: 10, top: 50, right: nil, bottom: nil, withAnchor: .top, relativeToView: profileImage)
        
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.minimumLineSpacing = 5
        layout.minimumInteritemSpacing = 5
//        layout.itemSize = CGSize(width: (view.frame.size.width/2)-4, height: (view.frame.size.width/3)-4)
        layout.itemSize = CGSize(width: width/2.05, height: 400)

        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)

//        guard let collectionView = collectionView else{
//            return
//        }
        collectionView.register(cellFavoriteCollectionView.self, forCellWithReuseIdentifier: cellFavoriteCollectionView.identifier)
        collectionView.dataSource = self
        collectionView.delegate = self
        view.addSubview(collectionView)
        collectionView.addAnchorsAndSize(width: nil, height: nil, left: 0, top: 5, right: 0, bottom: 0,withAnchor: .top,relativeToView: favoriteShows)
//        collectionView.frame = view.bounds
        collectionView.backgroundColor = UIColor(named: "background")
    }
}

//MARK: - View Methods
extension ProfileViewController: ProfileViewProtocol {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        listaFavorite.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellFavoriteCollectionView.identifier, for: indexPath) as! cellFavoriteCollectionView
//        cell.configure(model: listaFavorite[indexPath.row])
        let tarea = listaFavorite[indexPath.row]
        cell.movieDescription.text = tarea.descripcion
        cell.movieName.text = tarea.titulo
//        cell.movieFecha.text = tarea.fecha
//        cell.movieCalificacion.text = tarea.puntaje
       
        cell.contentView.layer.cornerRadius = 20
        cell.layer.masksToBounds = true
        return cell
    }
    
}

//MARK: - Private functions
extension ProfileViewController {
    
    @objc func dismissProfile(){
        dismiss(animated: true)
    }
    
    func recuperarDatos() {
        do {
            self.listaFavorite = try context.fetch(MoviesFavorite.fetchRequest())
            
        }
        catch {
            print("error")
        }
    }
    
}
